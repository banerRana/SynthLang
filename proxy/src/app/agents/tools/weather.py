"""
Weather tool for the SynthLang Proxy.

This module provides a tool for getting weather information.
"""
import logging
import random
import sys
import os
import traceback
from typing import Dict, Any, Optional

# Configure logging
logger = logging.getLogger(__name__)

# Add the project root to the Python path
project_root = os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))))
if project_root not in sys.path:
    sys.path.insert(0, project_root)
    logger.debug(f"Added {project_root} to Python path")

# Try to import from src.app first
try:
    from src.app.agents.registry import register_tool
    logger.debug("Successfully imported registry from src.app")
except ImportError as e:
    logger.error(f"Error importing from src.app.agents.registry: {e}")
    # Try to import from app
    try:
        from app.agents.registry import register_tool
        logger.debug("Successfully imported registry from app")
    except ImportError as e2:
        logger.error(f"Error importing from app.agents.registry: {e2}")
        # Define a dummy register_tool function to avoid errors
        def register_tool(name, func):
            logger.warning(f"Using dummy register_tool for {name}")

async def get_weather(location: str, user_message: Optional[str] = None, user_id: Optional[str] = None) -> Dict[str, Any]:
    """
    Get weather information for a location.
    
    Args:
        location: The location to get weather for
        user_message: The original user message (optional)
        user_id: The ID of the user making the request (optional)
        
    Returns:
        A dictionary containing the weather information
    """
    logger.info(f"Getting weather for location: {location}")
    
    try:
        # In a real implementation, we would call a weather API here
        # For now, we'll just return some mock data
        
        # Generate random weather data
        temperature = random.randint(0, 35)
        conditions = random.choice(["Sunny", "Cloudy", "Rainy", "Snowy", "Partly Cloudy"])
        humidity = random.randint(30, 90)
        wind_speed = random.randint(0, 30)
        
        # Create the response
        response = f"""Weather for {location}:

Temperature: {temperature}Â°C
Conditions: {conditions}
Humidity: {humidity}%
Wind Speed: {wind_speed} km/h

This weather information was generated by the weather tool. In a production environment, this would be real data from a weather API."""
        
        return {
            "content": response,
            "tool": "weather",
            "location": location,
            "temperature": temperature,
            "conditions": conditions,
            "humidity": humidity,
            "wind_speed": wind_speed
        }
    
    except Exception as e:
        error_message = f"""I couldn't get the weather for "{location}".

Error: {str(e)}

Please try again with a different location or check your spelling."""
        
        logger.error(f"Weather error: {str(e)}")
        
        return {
            "content": error_message,
            "tool": "weather",
            "location": location,
            "error": str(e)
        }

# Register the tool
try:
    register_tool("weather", get_weather)
    logger.info("Weather tool registered successfully")
except Exception as e:
    logger.error(f"Error registering weather tool: {e}")