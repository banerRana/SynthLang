{
  "text": "-- Find top customers by revenue with their purchase patterns\n#customer_revenue_analysis\nWITH customer_revenue AS (\n    SELECT \n        c.customer_id,\n        c.first_name,\n        c.last_name,\n        c.email,\n        SUM(oi.quantity * oi.unit_price) AS total_spent,\n        COUNT(DISTINCT o.order_id) AS order_count,\n        MIN(o.order_date) AS first_order_date,\n        MAX(o.order_date) AS last_order_date,\n        DATEDIFF(DAY, MIN(o.order_date), MAX(o.order_date)) AS customer_lifespan_days\n    FROM \n        customers c\n    JOIN \n        orders o ON c.customer_id = o.customer_id\n    JOIN \n        order_items oi ON o.order_id = oi.order_id\n    WHERE \n        o.order_status = 'completed'\n        AND o.order_date >= DATEADD(YEAR, -1, GETDATE())\n    GROUP BY \n        c.customer_id, c.first_name, c.last_name, c.email\n),\npurchase_patterns AS (\n    SELECT\n        cr.customer_id,\n        cr.total_spent / NULLIF(cr.order_count, 0) AS avg_order_value,\n        cr.order_count / NULLIF(cr.customer_lifespan_days, 0) * 30 AS monthly_purchase_frequency,\n        (SELECT TOP 1 p.category_id \n         FROM order_items oi \n         JOIN orders o ON oi.order_id = o.order_id \n         JOIN products p ON oi.product_id = p.product_id \n         WHERE o.customer_id = cr.customer_id \n         GROUP BY p.category_id \n         ORDER BY COUNT(*) DESC) AS favorite_category_id\n    FROM \n        customer_revenue cr\n),\ncustomer_segments AS (\n    SELECT\n        cr.*,\n        pp.avg_order_value,\n        pp.monthly_purchase_frequency,\n        c.name AS favorite_category,\n        CASE\n            WHEN pp.avg_order_value > 100 AND pp.monthly_purchase_frequency > 2 THEN 'High Value'\n            WHEN pp.avg_order_value > 100 THEN 'Big Spender'\n            WHEN pp.monthly_purchase_frequency > 2 THEN 'Frequent Buyer'\n            ELSE 'Regular Customer'\n        END AS customer_segment,\n        NTILE(5) OVER (ORDER BY cr.total_spent DESC) AS revenue_quintile\n    FROM\n        customer_revenue cr\n    JOIN\n        purchase_patterns pp ON cr.customer_id = pp.customer_id\n    LEFT JOIN\n        categories c ON pp.favorite_category_id = c.category_id\n)\nSELECT\n    cs.*,\n    RANK() OVER (ORDER BY cs.total_spent DESC) AS revenue_rank,\n    PERCENT_RANK() OVER (ORDER BY cs.total_spent) AS revenue_percentile\nFROM\n    customer_segments cs\nWHERE\n    cs.revenue_quintile = 1  -- Top 20% of customers\nORDER BY\n    cs.total_spent DESC;",
  "metadata": {
    "language": "sql",
    "heading": "Code Examples for Benchmarking",
    "length": 2415,
    "id": "sql_4",
    "description": "sql code example: Code Examples for Benchmarking"
  }
}