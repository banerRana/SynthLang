{
  "text": "import React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { useQuery, useMutation, useQueryClient } from 'react-query';\nimport { format } from 'date-fns';\nimport { toast } from 'react-toastify';\n\n// API service\n#api_service\nconst fetchProductDetails = async (id) => {\n  const response = await fetch(`/api/products/${id}`);\n  if (!response.ok) {\n    throw new Error('Failed to fetch product details');\n  }\n  return response.json();\n};\n\nconst fetchCategories = async () => {\n  const response = await fetch('/api/categories');\n  if (!response.ok) {\n    throw new Error('Failed to fetch categories');\n  }\n  return response.json();\n};\n\nconst updateProduct = async ({ id, data }) => {\n  const response = await fetch(`/api/products/${id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(data),\n  });\n  \n  if (!response.ok) {\n    throw new Error('Failed to update product');\n  }\n  \n  return response.json();\n};\n\n// Component\n#component_definition\nconst ProductDetail = () => {\n  // Hooks\n  const { id } = useParams();\n  const navigate = useNavigate();\n  const queryClient = useQueryClient();\n  \n  // State\n  const [isEditing, setIsEditing] = useState(false);\n  const [formData, setFormData] = useState({\n    name: '',\n    description: '',\n    price: 0,\n    categoryId: '',\n    tags: [],\n    stockQuantity: 0,\n    isActive: true\n  });\n  \n  // Queries\n  const { \n    data: product, \n    isLoading: isLoadingProduct, \n    isError: isProductError,\n    error: productError,\n    refetch: refetchProduct\n  } = useQuery(['product', id], () => fetchProductDetails(id), {\n    onSuccess: (data) => {\n      setFormData({\n        name: data.name,\n        description: data.description,\n        price: data.price,\n        categoryId: data.categoryId,\n        tags: data.tags || [],\n        stockQuantity: data.stockQuantity,\n        isActive: data.isActive\n      });\n    }\n  });\n  \n  // Handlers\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n  \n  // Render\n  if (isLoadingProduct) {\n    return <div>Loading...</div>;\n  }\n  \n  if (isProductError) {\n    return <div>Error: {productError.message}</div>;\n  }\n  \n  return (\n    <div>\n      <h1>{product.name}</h1>\n      <p>{product.description}</p>\n      <p>Price: ${product.price}</p>\n    </div>\n  );\n};\n\nexport default ProductDetail;",
  "metadata": {
    "language": "javascript",
    "heading": "Code Examples for Benchmarking",
    "length": 2508,
    "id": "javascript_3",
    "description": "javascript code example: Code Examples for Benchmarking"
  }
}